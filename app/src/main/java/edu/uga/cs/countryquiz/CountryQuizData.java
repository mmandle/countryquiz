package edu.uga.cs.countryquiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

/**
 * This class facilitates storing and restoring quizzes stored.
 */
public class CountryQuizData {

    public static final String DEBUG_TAG = "CountryQuizData";

    // this is a reference to our database; it is used later to run SQL commands
    private SQLiteDatabase db;
    private SQLiteOpenHelper countryQuizDbHelper;

    // Define all column names for the quizzes table
    private static final String[] allColumns = {
            CountryQuizDBHelper.QUIZ_COLUMN_ID,
            CountryQuizDBHelper.QUIZ_COLUMN_DATE,
            CountryQuizDBHelper.QUIZ_COLUMN_SCORE
    };

    public CountryQuizData(Context context) {
        this.countryQuizDbHelper = CountryQuizDBHelper.getInstance(context);
    }

    // Open the database
    public void open() {
        db = countryQuizDbHelper.getWritableDatabase();
        Log.d( DEBUG_TAG, "CountryQuizData: dp open" );
    }

    // Close the database
    public void close() {
        if (countryQuizDbHelper != null) {
            countryQuizDbHelper.close();
            Log.d(DEBUG_TAG, "CountryQuizData: db closed");
        }
    }

    public boolean isDBOpen()
    {
        return db.isOpen();
    }

    // Store a new quiz result
    public Quiz storeQuiz(Quiz quiz) {
        ContentValues values = new ContentValues();

        // Store values from quiz argument object
        values.put(CountryQuizDBHelper.QUIZ_COLUMN_DATE, quiz.getDate());
        values.put(CountryQuizDBHelper.QUIZ_COLUMN_SCORE, quiz.getScore());

        // Insert the new row into DB table; the id (primary key) will be automatically generated by the DB system and returned from db.insert
        long id = db.insert(CountryQuizDBHelper.TABLE_QUIZZES, null, values);

        // Store the id in the Quiz instance, as it is now persistent
        quiz.setId(id);

        return quiz;
    } // storeQuiz

    // Retrieve all quizzes and return them as a List.
    // This is how we restore persistent objects stored as rows in the quizzes table in the database.
    // For each retrieved row, we create a new Quiz (Java POJO object) instance and add it to the list.
    public List<Quiz> retrieveAllQuizzes() {
        ArrayList<Quiz> quizzes = new ArrayList<>();
        Cursor cursor = null;
        int columnIndex;

        try {
            // Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query(CountryQuizDBHelper.TABLE_QUIZZES, allColumns, null, null, null, null, null);

            if (cursor != null && cursor.getCount() > 0) {
                while (cursor.moveToNext()) {
                    // Retrieve column values
                    columnIndex = cursor.getColumnIndex(CountryQuizDBHelper.QUIZ_COLUMN_ID);
                    long id = cursor.getLong(columnIndex);
                    columnIndex = cursor.getColumnIndex(CountryQuizDBHelper.QUIZ_COLUMN_DATE);
                    String date = cursor.getString(columnIndex);
                    columnIndex = cursor.getColumnIndex(CountryQuizDBHelper.QUIZ_COLUMN_SCORE);
                    int score = cursor.getInt(columnIndex);

                    // Create a new Quiz object and set its state to the retrieved values
                    Quiz quiz = new Quiz(date, score);
                    quiz.setId(id);
                    // Add it to the List
                    quizzes.add(quiz);
                    Log.d(DEBUG_TAG, "Retrieved Quiz: " + quiz);
                }
                Log.d(DEBUG_TAG, "Number of records from DB: " + cursor.getCount());
            } else {
                Log.d(DEBUG_TAG, "Number of records from DB: 0");
            }
        } catch (Exception e) {
            Log.d(DEBUG_TAG, "Exception caught: " + e);
        } finally {
            // Close the cursor
            if (cursor != null) {
                cursor.close();
            }
        }
        return quizzes;
    }
    // retrieveAllQuizzes
}
